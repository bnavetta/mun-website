import org.springframework.boot.gradle.tasks.run.BootRun;

plugins {
    id 'idea'
    id 'eclipse'

    id 'org.ajoberstar.grgit' version '3.0.0'

    id 'org.springframework.boot' version '2.1.3.RELEASE' apply false
    id 'com.google.cloud.tools.jib' version '1.0.0' apply false
    id 'com.diffplug.gradle.spotless' version '3.18.0' apply false
    id 'com.gorylenko.gradle-git-properties' version '2.0.0' apply false
    id 'com.github.ben-manes.versions' version '0.20.0'
}

def computeVersion() {
    if (project.hasProperty('stableVersion')) {
        return 'latest';
    }

    def head = grgit.head().abbreviatedId
    def status = grgit.status()
    def changes = status.staged.allChanges + status.unstaged.allChanges
    if (changes.empty) {
        return head
    } else {
        return "${head}-dirty"
    }
}

def currentVersion = computeVersion()

allprojects {
    version = currentVersion
}

subprojects {
    plugins.withType(JavaPlugin) {
        group = 'org.brownmun'

        sourceCompatibility = '11'
        targetCompatibility = '11'

        repositories {
            jcenter()
        }

        // Needed so the annotationProcessor configuration can depend on :platform
        // https://discuss.gradle.org/t/consuming-java-platform-in-non-standard-configurations/30469
        configurations {
            annotationProcessor {
                attributes {
                    attribute(Usage.USAGE_ATTRIBUTE, project.objects.named(Usage, Usage.JAVA_API))
                }
            }
        }

        dependencies {
            implementation platform(project(':platform'))
            implementation platform(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)

            annotationProcessor platform(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
            annotationProcessor platform(project(':platform'))
        }
    }

    plugins.withType(JavaLibraryPlugin) {
        dependencies {
            api platform(project(':platform'))
            api platform(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
        }
    }

    plugins.withType(com.diffplug.gradle.spotless.SpotlessPlugin) {
        spotless {
            java {
                importOrder 'java', 'javax', 'org', 'com', 'org.brownmun', ''
                removeUnusedImports()
                eclipse().configFile rootProject.file('config/eclipse-formatter-settings.xml')
                trimTrailingWhitespace()
                endWithNewline()
            }
        }
    }

    tasks.withType(BootRun).configureEach {
        workingDir rootProject.projectDir
    }

    plugins.withType(org.springframework.boot.gradle.plugin.SpringBootPlugin) {
        springBoot {
            buildInfo {
                properties {
                    additional = [
                            'built-by-gradle': project.gradle.gradleVersion,
                            'built-by-java': System.getProperty('java.runtime.version')
                    ]
                }
            }
        }
    }
}

idea {
    project {
        vcs = 'Git'
    }
}

task printVersion {
    doLast {
        println project.version
    }
}

task pushImages(dependsOn: [':busun:jib', ':ui:dockerTag', ":ui:dockerPush${ucfirst(project.version)}"]) {}

// Copied from com.palantir.gradle plugin for consistency
String ucfirst(String str) {
    StringBuffer sb = new StringBuffer(str);
    sb.replace(0, 1, str.substring(0, 1).toUpperCase());
    return sb.toString();
}
