#!/usr/bin/env python
import os
import subprocess

import click
from sshtunnel import SSHTunnelForwarder


def tunnel(target_port):
    return SSHTunnelForwarder(
        'brownmun.us-east1-b.busun-158105',
        remote_bind_address=('127.0.0.1', target_port),
    )


@click.group()
def cli():
    pass


@click.group()
def dev():
    pass


cli.add_command(dev)


@click.command()
def startdb():
    click.secho('Starting local database...', fg='green')
    subprocess.call(['docker-compose', 'up', '-d', 'database', 'adminer'])


@click.command()
def stopdb():
    click.secho('Stopping local database...', fg='green')
    subprocess.call(['docker-compose', 'stop', 'database', 'adminer'])


@click.command()
def querydb():
    subprocess.call(['docker-compose', 'exec', 'database', 'psql', '-U', os.environ['DB_USER']])


@dev.command()
@click.option('--debug/--no-debug', default=False)
def run(debug):
    subprocess.call(['./gradlew', '-PstableVersion', 'busun:bootJar'])
    args = ['java']
    if debug:
        args.append('-agentlib:jdwp=transport=dt_socket,address=localhost:5005,server=y,suspend=y')
    args.extend(('-jar', 'busun/build/libs/busun-latest.jar'))
    if debug:
        args.append('--debug')
    subprocess.call(args)


dev.add_command(startdb)
dev.add_command(stopdb)
dev.add_command(querydb)


@cli.group()
def prod():
    pass


@prod.command('querydb')
def prod_querydb():
    with tunnel(5432) as t:
        subprocess.call(['psql', '-h', 'localhost', '-p', str(t.local_bind_port), '-U', os.environ['DB_USER']])


@prod.command('shell', context_settings=dict(ignore_unknown_options=True))
@click.argument('extra_args', nargs=-1, type=click.UNPROCESSED)
def prod_shell(extra_args):
    with tunnel(5432) as t:
        env = dict(os.environ)
        env['DB_JDBC_URL'] = 'jdbc:postgresql://localhost:{}/busun'.format(t.local_bind_port)
        subprocess.call(['./gradlew', '--console', 'plain', '-q', '-PstableVersion', 'cli:bootJar'])
        # Make sure the CLI runs with direct terminal access and the correct (non-daemon) environment variables
        subprocess.call(['java', '-Djava.library.path=cli/or-tools/lib', '-jar', 'cli/build/libs/cli-latest.jar',
            '--conference.name=BUSUN', '--conference.key=busun', '--conference.domainName=busun.org'] + list(extra_args), env=env)


@click.group(invoke_without_command=True)
@click.pass_context
def fmt():
    if ctx.invoked_subcommand is None:
        click.secho('Formatting all files...', fg='green')
        prettier()
        eslint()
        stylelint()
        spotless()


cli.add_command(fmt)


@click.command()
def prettier():
    subprocess.call(['./node_modules/.bin/prettier', '--write', 'ui/**/*.{js,jsx,css}'])


@click.command()
def eslint():
    subprocess.call(['./node_modules/.bin/eslint', '--ext', '.js', '--ext', '.jsx', 'ui'])


@click.command()
def stylelint():
    subprocess.call(['./node_modules/.bin/stylelint', 'ui/src/**/*.css'])


@click.command()
def spotless():
    subprocess.call(['./gradlew', 'spotlessApply'])


fmt.add_command(prettier)
fmt.add_command(eslint)
fmt.add_command(stylelint)
fmt.add_command(spotless)


if __name__ == '__main__':
    root = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..')
    os.chdir(root)
    cli()
