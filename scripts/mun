#!/usr/bin/env python
import os
import subprocess

import click
from sshtunnel import SSHTunnelForwarder


def tunnel(target_port):
    return SSHTunnelForwarder(
        'busun.org',
        ssh_username='brownmun',
        remote_bind_address=('127.0.0.1', target_port),
    )


def run_shell(extra_args, env):
    """Runs the command-line shell application"""
    subprocess.check_call(['./gradlew', '--console', 'plain', '-q', '-PstableVersion', 'cli:bootJar'])
    # Make sure the CLI runs with direct terminal access and the correct (non-daemon) environment variables
    subprocess.call([
        'java', '-Djava.library.path=cli/or-tools/lib', '-jar', 'cli/build/libs/cli-latest.jar',
        '--conference.name=BUSUN', '--conference.key=busun', '--conference.domainName=busun.org'
    ] + list(extra_args), env=env)


def version():
    """Gets the current project version from Gradle"""
    output = subprocess.check_output(['./gradlew', '--console', 'plain', '-q', 'printVersion'])
    return output.decode(encoding='utf-8').strip()

@click.group()
def cli():
    pass


@cli.group()
def dev():
    pass


@dev.command()
def startdb():
    click.secho('Starting local database...', fg='green')
    subprocess.call(['docker-compose', 'up', '-d', 'database', 'adminer'])


@dev.command()
def stopdb():
    click.secho('Stopping local database...', fg='green')
    subprocess.call(['docker-compose', 'stop', 'database', 'adminer'])


@dev.command()
def querydb():
    subprocess.call(['docker-compose', 'exec', 'database', 'psql', '-U', os.environ['DB_USER']])


@dev.command()
@click.option('--debug/--no-debug', default=False)
def run(debug):
    subprocess.call(['./gradlew', '-PstableVersion', 'busun:bootJar'])
    args = ['java']
    if debug:
        args.append('-agentlib:jdwp=transport=dt_socket,address=localhost:5005,server=y,suspend=y')
    args.extend(('-jar', 'busun/build/libs/busun-latest.jar'))
    if debug:
        args.append('--debug')
    subprocess.call(args)


@dev.command('shell', context_settings=dict(ignore_unknown_options=True))
@click.argument('extra_args', nargs=-1, type=click.UNPROCESSED)
def dev_shell(extra_args):
    run_shell(extra_args, os.environ)


@cli.group()
def prod():
    pass


@prod.command('querydb')
def prod_querydb():
    with tunnel(5432) as t:
        subprocess.call(['psql', '-h', 'localhost', '-p', str(t.local_bind_port), '-U', os.environ['DB_USER']])


@prod.command('shell', context_settings=dict(ignore_unknown_options=True))
@click.argument('extra_args', nargs=-1, type=click.UNPROCESSED)
def prod_shell(extra_args):
    with tunnel(5432) as t:
        env = dict(os.environ)
        env['DB_JDBC_URL'] = 'jdbc:postgresql://localhost:{}/busun'.format(t.local_bind_port)
        run_shell(extra_args, env)


@prod.command('ssh')
def prod_ssh():
    subprocess.call(['ssh', '-i', 'provisioning/keys/id_rsa', 'brownmun@busun.org'])


@cli.group(invoke_without_command=True, chain=True)
@click.pass_context
def fmt(ctx):
    if ctx.invoked_subcommand is None:
        click.secho('Formatting all files...', fg='green')
        prettier()
        eslint()
        stylelint()
        spotless()


@fmt.command()
def prettier():
    subprocess.call(['./node_modules/.bin/prettier', '--write', 'ui/**/*.{js,jsx,css}'])


@fmt.command()
def eslint():
    subprocess.call(['./node_modules/.bin/eslint', '--ext', '.js', '--ext', '.jsx', 'ui'])


@fmt.command()
def stylelint():
    subprocess.call(['./node_modules/.bin/stylelint', 'ui/src/**/*.css'])


@fmt.command()
def spotless():
    subprocess.call(['./gradlew', 'spotlessApply'])


@cli.command()
def deploy():
    ver = version()
    click.secho("Will deploy version {}".format(ver), fg='green')

    click.secho("Building Docker images", fg="green")
    subprocess.check_call(['./gradlew', 'pushImages'])

    click.secho("Running Ansible deploy playbook for BUSUN", fg="green")
    subprocess.check_call(
        ['ansible-playbook', 'deploy-conference.yml', '-e', 'conference=busun tag={}'.format(ver)],
        cwd='provisioning'
    )
    # TODO: BUCS and asset server

if __name__ == '__main__':
    root = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..')
    os.chdir(root)
    cli()
