---

- name: Ensure Kubernetes repo is configured
  yum_repository:
    name: kubernetes
    description: Kubernetes
    baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
    enabled: yes
    gpgcheck: yes
    repo_gpgcheck: yes
    gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
    file: kubernetes

- name: Ensure Kubernetes packages are installed
  dnf: name={{ item }} state=present
  with_items:
  - kubelet
  - kubeadm
  - kubectl

- name: Ensure kubelet is running
  service: name=kubelet state=started enabled=yes

- name: Add Kubernetes iptables config
  copy:
    src: k8s-sysctl.conf
    dest: /etc/sysctl.d/k8s.conf
    owner: root
    group: root
    mode: 0644

- name: Ensure auth configuration directory exists
  file: path=/etc/kubernetes/auth state=directory owner=root group=root mode=0700

- name: Copy over token files
  copy: src=tokens.csv dest=/etc/kubernetes/auth/tokens.csv owner=root group=root mode=0600

- name: Check if the cluster is already initialized
  stat:
    path: /etc/kubernetes/admin.conf
  register: k8s_admin_conf

- name: Create the Kubernetes cluster
  block:
  - name: Copy over Kubernetes config
    copy: src=kubeadm.yml dest=/tmp/kubeadm.yml owner=root group=root mode=0644
  - name: Initialize the cluster
    command: kubeadm init --config /tmp/kubeadm.yml
  - name: Allow scheduling pods on the main node
    command: kubectl taint nodes --all node-role.kubernetes.io/master-
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
  - name: Install Calico
    command: kubectl apply -f https://raw.githubusercontent.com/romana/romana/master/docs/kubernetes/romana-kubeadm.yml
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
  when: k8s_admin_conf.stat.exists is defined and not k8s_admin_conf.stat.exists

# By default, Kubernetes services can't bind on port 80 or port 443

# Forward port 80 to 30080
- iptables:
    state: absent
    table: nat
    chain: PREROUTING
    in_interface: eth0
    protocol: tcp
    match: tcp
    destination_port: 80
    jump: REDIRECT
    to_ports: 30080
    comment: Redirect web traffic to port 30080 for the Kubernetes ingress controller

# Forward port 443 to 30443
- iptables:
    state: absent
    table: nat
    chain: PREROUTING
    in_interface: eth0
    protocol: tcp
    match: tcp
    destination_port: 443
    jump: REDIRECT
    to_ports: 30443
    comment: Redirect web traffic to port 30080 for the Kubernetes ingress controller

