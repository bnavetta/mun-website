package org.brownmun.web.resources;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.google.common.collect.Lists;
import lombok.Data;

import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Contents of {@code stat.json} generated by webpack-stats plugin.
 */
@Data
public class WebpackStats
{
	@JsonDeserialize(contentUsing = StringsDeserializer.class)
	private Map<String, List<String>> assetsByChunkName;

	// Webpack encodes chunks with one file as a string and with multiple as a list of strings
	// Evidently, those are not the same type.
	public static class StringsDeserializer extends StdDeserializer<List<String>>
	{
		public StringsDeserializer()
		{
			super(TypeFactory.defaultInstance().constructCollectionType(List.class, String.class));
		}

		@Override
		public List<String> deserialize(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException
		{
			if (p.getCurrentToken() == JsonToken.START_ARRAY)
			{
				List<String> values = Lists.newArrayList();
				while (p.nextToken() != JsonToken.END_ARRAY)
				{
					values.add(_parseString(p, ctxt));
				}
				return values;
			}
			else {
				return Lists.newArrayList(_parseString(p, ctxt));
			}
		}
	}
}
